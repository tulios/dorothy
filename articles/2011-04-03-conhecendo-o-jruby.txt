--- 
title: Conhecendo o JRuby
date: 03/04/2011

Com o desenvolvimento do **RailsPortlet** eu falei um bocado sobre JRuby e o mundo Java + Ruby, vou tentar resumir as diferenças e possibilidades dessa tecnologia nesse post.
~

O [JRuby][jruby] é o Ruby 100% implementado em Java, ele se utiliza do melhor da JVM: alta performance, threads reais, um belo conjunto de frameworks e portabilidade, tudo isso utilizando a sintaxe e o "jeito" Ruby de se fazer as coisas. Preciso falar mais alguma coisa? Isso é incrível, a JVM e a linguagem Java já possuem mais de 10 anos de mercado, são tecnologias totalmente consolidadas. O que [Charles Nutter][nutter] e os desenvolvedores do JRuby fizeram foi "atualizar" a linguagem mantendo a infraestrutura.  

Chega de papo e vamos ver como isso funciona. Podemos instalar o JRuby baixando um .tar (ou .zip) direto do [site oficial][jruby_download], extraí-lo em algum lugar e adicionar a pasta bin ao path. Feito isso faça o seguinte teste:
<pre>
  <code class="bash">
    jruby -V
    # jruby 1.5.6 (ruby 1.8.7 patchlevel 249) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_24)
    jgem -v
    # 1.3.6
    jirb -v
    # irb 0.9.5(05/04/13)
  </code>
</pre>

Se precisar de um passo a passo mais detalhado siga o _getting started_ do [site][jruby_start].  
Vamos criar um _hello world_ com [swing][java_swing]:
<pre>
  <code class="ruby">
    include Java
    java_import javax.swing.JOptionPane

    JOptionPane.show_message_dialog nil, "Hello JRuby"
    # ou JOptionPane.showMessageDialog(nil, "Hello JRuby") como em Java
  </code>
</pre>
Rodando o exemplo apresentado:
<pre>
  <code class="bash">
    jruby swing_example.rb
  </code>
</pre>
Quando o seu programa estiver rodando sobre o JRuby a constante **RUBY_PLATFORM** sempre retornará **"java"**, você também terá acesso a **JRUBY_VERSION** e **ENV_JAVA**. Extensões em C e o método __fork__ não são compatíveis.  

Essa pequena introdução mostrou que podemos utilizar frameworks Java através do Ruby, isso aumenta consideravelmente o nosso leque de opções na hora de desenvolver e permite aproveitar o melhor dos dois mundos. No próximo post vou mostrar como executar código Ruby através do **ScriptingContainer**.  
o/  

  [jruby]: http://jruby.org/ "JRuby"
  [jruby_download]: http://jruby.org/download
  [jruby_start]: http://jruby.org/getting-started
  [nutter]: http://blog.headius.com/ "Charles Nutter"
  [java_swing]: http://en.wikipedia.org/wiki/Swing_(Java)